{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeStyle as _normalizeStyle } from \"vue\";\nconst _hoisted_1 = {\n  class: \"particle-container\",\n  ref: \"container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.particles, (particle, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"particle\",\n      style: _normalizeStyle(particle.style)\n    }, null, 4 /* STYLE */);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["class","ref","_createElementBlock","_hoisted_1","_Fragment","_renderList","$data","particles","particle","index","key","style","_normalizeStyle"],"sources":["/Users/zhangyang/Desktop/py/guandan/frontend/src/components/ParticleEffect.vue"],"sourcesContent":["<template>\n  <div class=\"particle-container\" ref=\"container\">\n    <div v-for=\"(particle, index) in particles\" \n         :key=\"index\" \n         class=\"particle\"\n         :style=\"particle.style\">\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'ParticleEffect',\n  props: {\n    color: {\n      type: String,\n      default: '#ffd700'\n    },\n    count: {\n      type: Number,\n      default: 20\n    }\n  },\n  data() {\n    return {\n      particles: []\n    }\n  },\n  methods: {\n    createParticle() {\n      const particle = {\n        x: Math.random() * 100,\n        y: Math.random() * 100,\n        size: Math.random() * 3 + 2,\n        speedX: (Math.random() - 0.5) * 8,\n        speedY: (Math.random() - 0.5) * 8,\n        opacity: 1,\n        style: {}\n      }\n      this.updateParticleStyle(particle);\n      return particle;\n    },\n    updateParticleStyle(particle) {\n      particle.style = {\n        left: `${particle.x}%`,\n        top: `${particle.y}%`,\n        width: `${particle.size}px`,\n        height: `${particle.size}px`,\n        opacity: particle.opacity,\n        backgroundColor: this.color\n      }\n    },\n    animate() {\n      this.particles.forEach(particle => {\n        particle.x += particle.speedX;\n        particle.y += particle.speedY;\n        particle.opacity -= 0.02;\n        this.updateParticleStyle(particle);\n      });\n      \n      this.particles = this.particles.filter(p => p.opacity > 0);\n      \n      if (this.particles.length > 0) {\n        requestAnimationFrame(this.animate);\n      }\n    },\n    start() {\n      this.particles = Array(this.count).fill().map(() => this.createParticle());\n      this.animate();\n    }\n  },\n  mounted() {\n    this.start();\n  }\n}\n</script>\n\n<style scoped>\n.particle-container {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: 1000;\n}\n\n.particle {\n  position: absolute;\n  border-radius: 50%;\n  pointer-events: none;\n  transition: opacity 0.1s linear;\n}\n</style> "],"mappings":";;EACOA,KAAK,EAAC,oBAAoB;EAACC,GAAG,EAAC;;;uBAApCC,mBAAA,CAMM,OANNC,UAMM,I,kBALJD,mBAAA,CAIME,SAAA,QANVC,WAAA,CAEqCC,KAAA,CAAAC,SAAS,EAF9C,CAEiBC,QAAQ,EAAEC,KAAK;yBAA5BP,mBAAA,CAIM;MAHAQ,GAAG,EAAED,KAAK;MACXT,KAAK,EAAC,UAAU;MACfW,KAAK,EALfC,eAAA,CAKiBJ,QAAQ,CAACG,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}